#pragma checksum "C:\Users\etasci\source\repos\SignalR.WEBApp\SignalR.WEBApp\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "311ade06b9b111eb850f1435c4d8abd4d2ba78b3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\etasci\source\repos\SignalR.WEBApp\SignalR.WEBApp\Views\_ViewImports.cshtml"
using SignalR.WEBApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\etasci\source\repos\SignalR.WEBApp\SignalR.WEBApp\Views\_ViewImports.cshtml"
using SignalR.WEBApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"311ade06b9b111eb850f1435c4d8abd4d2ba78b3", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"43e07144c41ea927ec926522832500e0c5ebd13e", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/microsoft/signalr/dist/browser/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\etasci\source\repos\SignalR.WEBApp\SignalR.WEBApp\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    \r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "311ade06b9b111eb850f1435c4d8abd4d2ba78b33810", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script type=""text/javascript"">

        $(document).ready(() => {

        
            var connection = new signalR.HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withAutomaticReconnect().withUrl(""https://localhost:44301/myhub"").build();
            //Hub'ımızı çağırdık. Bağlantı kurduk ve bağlantıyı kimle kuracağımızı yazdık.
            $(""#sohbet1"").hide();
            $(""#sohbet2"").hide();
            statusShow()
            Start()

            function Start() {
                connection.start().then(() => {
                    statusShow()
                    if (connection.connectionState == ""Connected"") {
                        $(""#conStatus"").text(""Bağlandı!"");
                        $(""#conStatus"").addClass(""text-success"");
                        $(""#loading"").hide();
                        //connection.invoke(""GetNames"");
                        connection.invoke(""GetNamesByGroup"");
                    }
                }).catch((err) => {
    ");
                WriteLiteral(@"                console.log(err);
                    setTimeout(()=>Start(), 2000)
                })
            }

            function statusShow() {
                $(""#conStatus"").text(connection.connectionState);
            }

            

            connection.onreconnecting(err => {
                alert(err)
                $(""#loading"").show();
                statusShow()
                console.log(""onreconnection:"" + err);
            });

            connection.onreconnected(connectionId => {
                $(""#loading"").hide();
                statusShow()
                console.log(""connectionId: ""+connectionId )
            });

            connection.onclose(() => {
                $(""#loading"").hide();
                statusShow();
                $(""#conStatus"").addClass(""text-danger"");
                alert(""Yeniden bağlanma başarısız oldu!"");
                Start();
            });

            connection.on(""RecieveClientCount"", (clientCount) => {");
                WriteLiteral(@"
                $(""#clientCount"").text(clientCount);
            });

            connection.on(""Notify"", (countText) => {
                console.log(countText);
                $(""#notify"").html(`<div class=""alert alert-warning alert-dismissible fade show"" role=""alert""> ${countText}
                                        <button type=""button"" class=""close"" data-dismiss=""alert"" aria-label=""Close"">
                                            <span aria-hidden=""true"">&times;</span>
                                        </button>
                                   </div>`);
            });

            connection.on(""Error"", (errorText) => {
                alert(errorText);
            });

            connection.on(""RecieveNames"", (names) => {
                $(""#namesList"").empty();
                names.forEach((item, index) => {
                    var colon = item.split(':');
                    var messageName = colon[0];
                    var messageMsg = colon[1];
          ");
                WriteLiteral(@"          $(""#namesList"").append(`<li class=""list-group-item""><b>${messageName}: </b>${messageMsg}</li>`)
                })
            });

            connection.on(""RecieveName"", (newMessage) => {
                console.log(newMessage);


                var colon = newMessage.split(':');
                var messageName = colon[0];
                var messageMsg = colon[1];
                $(""#namesList"").append(`<li class=""list-group-item""><b>${messageName}: </b>${messageMsg}</li>`)
            })
        //on methodu bir methoda subscribe olma işlemine yarar.

            connection.on(""RecieveMessageByGroup"", (name, teamId) => {
                let listName;
                
                if (teamId == 1) {
                    listName = ""ATeamList"";
                }
                else {
                    listName=""BTeamList""
                }

                let colon = name.split(':');
                let messageName = colon[0];
                let messageMsg = col");
                WriteLiteral(@"on[1];
                $(`#${listName}`).append(`<li class=""list-group-item""><b>${messageName}</b>: ${messageMsg}</li>`)
            })

            connection.on(""RecieveNamesByGroup"", (teams) => {
                
                teams.forEach((team, index) => {
                    
                    let listName;
                    if (team.teamId == 1) {
                        listName = ""ATeamList"";
                    }
                    else {
                        listName = ""BTeamList"";
                    }
                    team.users.forEach((user, index2) => {
                        let colon = user.name.split(':');
                        let messageName = colon[0];
                        let messageMsg = colon[1];
                        $(`#${listName}`).append(`<li class=""list-group-item""><b>${messageName}</b>: ${messageMsg}</li>`)
                        
                    })
                })
            })

            connection.on(""RecieveProduct"",");
                WriteLiteral(@" (product) => {
                console.log(product);
            })


            $(""#btnNameSave"").click(() => {
                let name = $(""#txtName"").val();
                
                let message = $(""#txtMessage"").val();

                let newMessage = name.concat("": "", message);
                connection.invoke(""SendName"", newMessage).catch((err) =>
                    console.log(err))
                //server tarafındaki methodları çağırmaya yarar. (invoke)
            })

            $(""#btnNameTeam"").click(() => {
                let name = $(""#txtName"").val();
                let message = $(""#txtMessage"").val();
                let concatName = name.concat("": "", message);
                let teamName = $(""input[type=radio]:checked"").val();
                if (teamName==null) {
                    alert(""Sohbet odası seçiniz"");
                    return;
                }

                connection.invoke(""SendNameByGroup"", concatName, teamName).catch((err) =>");
                WriteLiteral(@" {
                    console.log(err);
                })
            })

            $(""input[type=radio]"").change(() => {
                let value = $(`input[type=radio]:checked`).val();
                
                if (value == ""TeamA"") {
                    $(""#sohbet2"").hide();
                    $(""#sohbet1"").show();
                    connection.invoke(""AddToGroup"", value);
                    connection.invoke(""RemoveToGroup"", ""TeamB"");

                }
                else {
                    $(""#sohbet1"").hide();
                    $(""#sohbet2"").show();
                    connection.invoke(""AddToGroup"", value);
                    connection.invoke(""RemoveToGroup"", ""TeamA"");
                }
            })

            $(""#btnProduct"").click(() => {
                let product = { ""Id"": 1, ""Name"": ""Kalem"", ""Price"": 100, ""Stock"": 200 };
                connection.invoke(""SendProduct"", product);
            })
            
        })
    </script>
");
            }
            );
            WriteLiteral("\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-md-8 offset-2\">\r\n        <input type=\"text\" class=\"form-control\" id=\"txtName\" name=\"name\"");
            BeginWriteAttribute("value", " value=\"", 7446, "\"", 7454, 0);
            EndWriteAttribute();
            WriteLiteral(" /><br />\r\n        <textarea class=\"form-control\" id=\"txtMessage\">\r\n\r\n        </textarea><br />\r\n");
            WriteLiteral("        <button class=\"btn btn-warning\" id=\"btnNameTeam\">\r\n            Mesaj Gönder\r\n        </button>\r\n");
            WriteLiteral(@"        
        <br /><br />
        <div class=""alert alert-info"">
            <div class=""float-left"">
                Bağlantı Durumu: <b id=""conStatus""></b> | 
                Bağlı Kullanıcı Sayısı: <b id=""clientCount""> </b>
            </div>
            <div class=""float-right"">
                <div id=""loading"" class=""spinner-border"" role=""status"">
                    <span class=""sr-only"">Loading...</span>
                </div>
            </div>
            <div class=""clearfix"">

            </div>
        </div>
        <div id=""notify"">

        </div>
        

    </div>
</div>

<div class=""row"">
    <div class=""col-md-8 offset-md-2"">
        <div class=""form-check form-check-inline"">
            <input type=""radio"" class=""form-check-input"" name=""TeamGroup"" value=""TeamA"" />
            <label class=""form-check-label"">Sohbet Odası 1</label>
        </div>
        <div class=""form-check form-check-inline"">
            <input type=""radio"" class=""form-check-input"" n");
            WriteLiteral(@"ame=""TeamGroup"" value=""TeamB"" />
            <label class=""form-check-label"">Sohbet Odası 2</label>
        </div>
    </div>
    <div class=""col-md-8 offset-2 shadow"" style=""border: .1px solid gray;"">
        <div class=""row"">
            <div class=""col-md-12"" id=""sohbet1"">
                <ul class=""list-group"" id=""ATeamList"">
                    <li class=""list-group-item"">
                        1 Numaralı Sohbet Odasına Hoşgeldiniz...
                    </li>

                </ul>
            </div>
        </div>
        <div class=""row"" id=""sohbet2"">
            <div class=""col-md-12"">
                <ul class=""list-group"" id=""BTeamList"">
                    <li class=""list-group-item"">
                        2 Numaralı Sohbet Odasına Hoşgeldiniz...
                    </li>

                </ul>
            </div>
        </div>
            
    </div>

        
</div>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
